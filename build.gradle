plugins {
	id 'java'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'br.com.jadson'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'commons-io:commons-io:2.11.0'

	implementation fileTree(dir: 'libs', include: '*.jar')

	/**
	 *  For APi documentation
	 */
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.0.3'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

/**
 *
 * The -P flag is for gradle properties, and the -D flag is for JVM properties.
 * Because the test may be forked in a new JVM, the -D argument passed to gradle
 * will not be propagated to the test
 *
 * You can use the systemProperty in your test block as you have done but base it
 * on the incoming gradle property by passing it with it -P
 *
 * https://stackoverflow.com/questions/21406265/how-to-give-system-property-to-my-test-via-gradle-and-d
 *
 * gradle -Pgithub.token=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx build
 *
 */
test {
	systemProperty "github.token", project.getProperty("github.token")
}
